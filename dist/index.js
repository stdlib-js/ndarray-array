"use strict";var g=function(a,n){return function(){return n||a((n={exports:{}}).exports,n),n.exports}};var O=g(function(Fe,T){"use strict";var H=require("@stdlib/constants-float64-pinf"),J=require("@stdlib/math-base-assert-is-integer");function K(a){return typeof a=="object"&&a!==null&&typeof a.length=="number"&&J(a.length)&&a.length>=0&&a.length<H}T.exports=K});var j=g(function(Ie,x){"use strict";var m=require("@stdlib/ndarray-defaults");function Q(){return{casting:m.get("casting"),copy:!1,dtype:m.get("dtypes.default"),flatten:!0,mode:m.get("index_mode"),ndmin:0,order:m.get("order"),readonly:!1}}x.exports=Q});var k=g(function(Re,S){"use strict";var D=require("@stdlib/ndarray-base-assert-is-equal-data-type"),W=require("@stdlib/ndarray-base-buffer-ctors"),X=require("@stdlib/buffer-alloc-unsafe"),Y=require("@stdlib/array-base-resolve-getter"),Z=require("@stdlib/array-base-resolve-setter");function $(a,n,r){var u,i,o,t,e;if(u=Y(a),D(r,"generic")){for(t=[],e=0;e<n;e++)t.push(u(a,e));return t}if(D(r,"binary")){for(t=X(n),e=0;e<n;e++)t[e]=u(a,e);return t}for(o=W(r),t=new o(n),i=Z(t),e=0;e<n;e++)i(t,e,u(a,e));return t}S.exports=$});var C=g(function(Ge,A){"use strict";var B=require("@stdlib/ndarray-base-assert-is-equal-data-type"),ee=require("@stdlib/buffer-alloc-unsafe"),re=require("@stdlib/ndarray-base-buffer-ctors"),ae=require("@stdlib/ndarray-shape"),ie=require("@stdlib/ndarray-order"),te=require("@stdlib/ndarray-base-numel"),ne=require("@stdlib/ndarray-base-shape2strides"),oe=require("@stdlib/ndarray-base-assign"),se=require("@stdlib/array-base-zeros");function ue(a,n){var r,u,i,o,t,e;return e=ae(a),t=ie(a),o=te(e),B(n,"generic")?r=se(o):B(n,"binary")?r=ee(o):(u=re(n),r=new u(o)),i={dtype:n,data:r,shape:e,strides:ne(e,t),offset:0,order:t},oe([a,i]),r}A.exports=ue});var M=g(function(Ue,N){"use strict";function fe(a,n,r){var u,i;for(u=[],i=0;i<r-a;i++)u.push(1);for(i=0;i<a;i++)u.push(n[i]);return u}N.exports=fe});var L=g(function(_e,V){"use strict";var pe=require("@stdlib/ndarray-base-assert-is-row-major-string"),de=require("@stdlib/math-base-special-abs");function ve(a,n,r,u){var i,o,t,e,f;if(o=r.length,f=a-o,i=[],pe(u)){for(t=de(r[0])*n[f],e=0;e<f;e++)i.push(t);for(e=0;e<o;e++)i.push(r[e])}else{for(e=0;e<f;e++)i.push(1);for(e=0;e<o;e++)i.push(r[e])}return i}V.exports=ve});var _=g(function(He,U){"use strict";var d=require("@stdlib/assert-has-own-property"),P=require("@stdlib/assert-is-plain-object"),z=require("@stdlib/assert-is-boolean").isPrimitive,F=require("@stdlib/assert-is-array"),le=require("@stdlib/assert-is-nonnegative-integer").isPrimitive,ce=require("@stdlib/assert-is-ndarray-like"),h=require("@stdlib/ndarray-base-assert-is-equal-data-type"),ge=require("@stdlib/ndarray-base-assert-is-column-major-string"),ye=require("@stdlib/ndarray-base-assert-is-data-type"),me=require("@stdlib/ndarray-base-assert-is-order"),he=require("@stdlib/ndarray-base-assert-is-casting-mode"),qe=require("@stdlib/ndarray-base-assert-is-allowed-data-type-cast"),we=require("@stdlib/ndarray-base-shape2strides"),be=require("@stdlib/ndarray-base-strides2offset"),Ee=require("@stdlib/ndarray-base-strides2order"),q=require("@stdlib/ndarray-base-numel"),Te=require("@stdlib/ndarray-ctor"),Oe=require("@stdlib/ndarray-base-buffer"),xe=require("@stdlib/ndarray-base-buffer-dtype"),je=require("@stdlib/ndarray-dtype"),De=require("@stdlib/ndarray-shape"),I=require("@stdlib/ndarray-strides"),Se=require("@stdlib/ndarray-offset"),R=require("@stdlib/ndarray-order"),ke=require("@stdlib/ndarray-data-buffer"),G=require("@stdlib/array-shape"),Be=require("@stdlib/array-base-flatten"),p=require("@stdlib/string-format"),w=O(),Ae=j(),Ce=k(),Ne=C(),Me=M(),Ve=L(),v=Ae();function Le(){var a,n,r,u,i,o,t,e,f,l,s,b,c,E,y;if(arguments.length===1)if(w(arguments[0]))r=arguments[0],a={};else{if(a=arguments[0],!P(a))throw new TypeError(p("invalid argument. Must provide either a valid data source, options argument, or both. Value: `%s`.",a));if(d(a,"buffer")&&(r=a.buffer,!w(r)))throw new TypeError(p("invalid option. `%s` option must be an array-like object, typed-array-like, a Buffer, or an ndarray. Option: `%s`.","buffer",r))}else{if(r=arguments[0],!w(r))throw new TypeError(p("invalid option. Data source must be an array-like object, typed-array-like, a Buffer, or an ndarray. Value: `%s`.",r));if(a=arguments[1],!P(a))throw new TypeError(p("invalid argument. Options argument must be an object. Value: `%s`.",a))}if(r&&(ce(r)?(t=je(r),y=!0):(t=xe(r)||"generic",y=!1)),l={},s={},d(a,"casting")){if(s.casting=a.casting,!he(s.casting))throw new TypeError(p("invalid option. `%s` option must be a recognized casting mode. Option: `%s`.","casting",s.casting))}else s.casting=v.casting;if(d(a,"flatten")){if(s.flatten=a.flatten,!z(s.flatten))throw new TypeError(p("invalid option. `%s` option must be a boolean. Option: `%s`.","flatten",s.flatten))}else s.flatten=v.flatten;if(d(a,"ndmin")){if(s.ndmin=a.ndmin,!le(s.ndmin))throw new TypeError(p("invalid option. `%s` option must be a nonnegative integer. Option: `%s`.","ndmin",s.ndmin))}else s.ndmin=v.ndmin;if(d(a,"dtype")){if(o=a.dtype,!ye(o))throw new TypeError(p("invalid option. `%s` option must be a supported data type. Option: `%s`.","dtype",o));if(t&&!qe(t,o,s.casting))throw new Error(p("invalid option. Data type cast is not allowed. Casting mode: `%s`. From: `%s`. To: `%s`.",s.casting,t,o))}else t?!y&&h(t,"generic")?o=v.dtype:o=t:o=v.dtype;if(d(a,"order")){if(i=a.order,i==="any"||i==="same")y?i==="any"?(E=Ee(I(r)),E===3?i=v.order:i=R(r)):i==="same"&&(i=R(r)):i=v.order;else if(!me(i))throw new TypeError(p("invalid option. `%s` option must be a recognized order. Option: `%s`.","order",i))}else i=v.order;if(d(a,"mode")?l.mode=a.mode:l.mode=v.mode,d(a,"submode")?l.submode=a.submode:l.submode=[l.mode],d(a,"readonly")?l.readonly=a.readonly:l.readonly=v.readonly,d(a,"copy")){if(s.copy=a.copy,!z(s.copy))throw new TypeError(p("invalid option. `%s` option must be a boolean. Option: `%s`.","copy",s.copy))}else s.copy=v.copy;if(d(a,"shape")){if(e=a.shape,!w(e))throw new TypeError(p("invalid option. `%s` option must be an array-like object containing nonnegative integers. Option: `%s`.","shape",e));f=e.length,c=q(e)}else if(r)y?(e=De(r),f=e.length,c=q(e)):s.flatten&&F(r)?(e=G(r),b=e,f=e.length,c=q(e)):(f=1,c=r.length,e=[c]);else throw new Error("invalid arguments. Must provide either a data source, array shape, or both.");if(f<s.ndmin&&(e=Me(f,e,s.ndmin),f=s.ndmin),y){if(q(r.shape)!==c)throw new RangeError("invalid arguments. Array shape is incompatible with provided data source. Number of data source elements does not match array shape.");!h(t,o)||s.copy?r=Ne(r,o):(n=I(r),u=Se(r),r=ke(r),n.length<f&&(n=Ve(f,e,n,i)))}else if(r){if(h(t,"generic")&&s.flatten&&F(r)&&(r=Be(r,b||G(r),ge(i))),r.length!==c)throw new RangeError("invalid arguments. Array shape is incompatible with provided data source. Number of data source elements does not match array shape.");(!h(t,o)||s.copy)&&(r=Ce(r,c,o))}else r=Oe(o,c);return n===void 0&&(n=we(e,i),u=be(e,n)),new Te(o,r,e,n,u,i,l)}U.exports=Le});var Pe=_();module.exports=Pe;
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
//# sourceMappingURL=index.js.map
