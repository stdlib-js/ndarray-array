{
  "version": 3,
  "sources": ["../lib/is_array_like_object.js", "../lib/defaults.js", "../lib/cast_buffer.js", "../lib/copy_view.js", "../lib/expand_shape.js", "../lib/expand_strides.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar isInteger = require( '@stdlib/math-base-assert-is-integer' );\n\n\n// MAIN //\n\n/**\n* Tests (loosely) if an input value is an array-like object.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if an input value is an array-like object\n*\n* @example\n* var bool = isArrayLikeObject( [] );\n* // returns true\n*\n* @example\n* var bool = isArrayLikeObject( '' );\n* // returns false\n*/\nfunction isArrayLikeObject( value ) {\n\treturn (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\ttypeof value.length === 'number' &&\n\t\tisInteger( value.length ) &&\n\t\tvalue.length >= 0 &&\n\t\tvalue.length < PINF\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isArrayLikeObject;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar settings = require( '@stdlib/ndarray-defaults' );\n\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*\n* @example\n* var o = defaults();\n* // returns {...}\n*/\nfunction defaults() {\n\treturn {\n\t\t'casting': settings.get( 'casting' ),\n\t\t'copy': false,\n\t\t'dtype': settings.get( 'dtypes.default' ),\n\t\t'flatten': true,\n\t\t'mode': settings.get( 'index_mode' ),\n\t\t'ndmin': 0,\n\t\t'order': settings.get( 'order' ),\n\t\t'readonly': false\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = defaults;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar bufferCtors = require( '@stdlib/ndarray-base-buffer-ctors' );\nvar allocUnsafe = require( '@stdlib/buffer-alloc-unsafe' );\n\n\n// MAIN //\n\n/**\n* Casts buffer elements by copying those elements to a buffer of another data type.\n*\n* @private\n* @param {(Array|TypedArray|Buffer)} buffer - input buffer\n* @param {NonNegativeInteger} len - number of elements to cast\n* @param {string} dtype - data type\n* @returns {(Array|TypedArray|Buffer)} output buffer\n*\n* @example\n* var b = castBuffer( [ 1.0, 2.0, 3.0 ], 3, 'float64' );\n* // returns <Float64Array>[ 1.0, 2.0, 3.0 ]\n*/\nfunction castBuffer( buffer, len, dtype ) {\n\tvar ctor;\n\tvar out;\n\tvar i;\n\n\tctor = bufferCtors( dtype );\n\tif ( dtype === 'generic' ) {\n\t\tout = [];\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tout.push( buffer[ i ] );\n\t\t}\n\t} else if ( dtype === 'binary' ) {\n\t\tout = allocUnsafe( len );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tout[ i ] = buffer[ i ];\n\t\t}\n\t} else {\n\t\tout = new ctor( len );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tout[ i ] = buffer[ i ]; // TODO: wrap and use accessors here and above\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = castBuffer;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar castReturn = require( '@stdlib/complex-base-cast-return' );\nvar complexCtors = require( '@stdlib/complex-ctors' );\nvar bufferCtors = require( '@stdlib/ndarray-base-buffer-ctors' );\nvar allocUnsafe = require( '@stdlib/buffer-alloc-unsafe' );\nvar ndarray = require( '@stdlib/ndarray-base-ctor' );\nvar getDType = require( '@stdlib/ndarray-dtype' );\nvar getShape = require( '@stdlib/ndarray-shape' );\nvar getStrides = require( '@stdlib/ndarray-strides' );\nvar getOffset = require( '@stdlib/ndarray-offset' );\nvar getOrder = require( '@stdlib/ndarray-order' );\nvar getData = require( '@stdlib/ndarray-data-buffer' );\n\n\n// FUNCTIONS //\n\n/**\n* Copies a \"generic\" ndarray view.\n*\n* @private\n* @param {ndarray} arr - input ndarray\n* @returns {Array} output data buffer\n*/\nfunction generic( arr ) {\n\tvar len;\n\tvar out;\n\tvar i;\n\n\tlen = arr.length;\n\tout = [];\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout.push( arr.iget( i ) ); // as output buffer is generic, should work with both real- and complex-valued ndarrays\n\t}\n\treturn out;\n}\n\n/**\n* Copies a \"binary\" ndarray view.\n*\n* @private\n* @param {ndarray} arr - input ndarray\n* @returns {Array} output data buffer\n*/\nfunction binary( arr ) {\n\tvar len;\n\tvar out;\n\tvar i;\n\n\tlen = arr.length;\n\tout = allocUnsafe( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout[ i ] = arr.iget( i ); // we're assuming that we're doing something sensible here (e.g., not trying to cast a complex-valued ndarray to a \"binary\" ndarray or a double-precision floating-point ndarray to binary, etc)\n\t}\n\treturn out;\n}\n\n/**\n* Copies a \"typed\" ndarray view.\n*\n* @private\n* @param {ndarray} arr - input ndarray\n* @param {string} dtype - data type\n* @returns {Array} output data buffer\n*/\nfunction typed( arr, dtype ) {\n\tvar ctor;\n\tvar len;\n\tvar out;\n\tvar set;\n\tvar fcn;\n\tvar o;\n\tvar i;\n\n\tctor = bufferCtors( dtype );\n\tlen = arr.length;\n\tout = new ctor( len );\n\n\t// If the output data buffer is a complex number array, we need to use accessors...\n\to = arraylike2object( out );\n\tif ( o.accessorProtocol ) {\n\t\tset = o.accessors[ 1 ];\n\t\tfcn = castReturn( wrapper, 1, complexCtors( dtype ) );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tset( out, i, fcn( i ) ); // we're assuming that we're doing something sensible here (e.g., not trying to cast arbitrary objects to complex numbers, etc)\n\t\t}\n\t} else {\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tout[ i ] = arr.iget( i ); // we're assuming that we're doing something sensible here (e.g., not trying to cast an ndarray containing generic objects to a double-precision floating-point array or a complex-valued ndarray to a real-valued ndarray, etc)\n\t\t}\n\t}\n\treturn out;\n\n\t/**\n\t* Returns the ndarray element specified by a provided linear index.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} i - linear index\n\t* @returns {*} value\n\t*/\n\tfunction wrapper( i ) {\n\t\treturn arr.iget( i );\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Copies an ndarray view to a data buffer.\n*\n* @private\n* @param {ndarray} arr - input ndarray\n* @param {string} dtype - data type\n* @returns {(Array|TypedArray|Buffer)} output data buffer\n*\n* @example\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n*\n* var buffer = [ 1.0, 2.0, 3.0 ];\n* var shape = [ 3 ];\n* var strides = [ -1 ];\n* var vec = ndarray( 'generic', buffer, shape, strides, 2, 'row-major' );\n*\n* var b = copyView( vec, 'float64' );\n* // returns <Float64Array>[ 3.0, 2.0, 1.0 ]\n*/\nfunction copyView( arr, dtype ) {\n\tvar x;\n\n\t// Create a new \"base\" view, thus ensuring we have an `.iget` method and associated meta data...\n\tx = new ndarray( getDType( arr ), getData( arr ), getShape( arr ), getStrides( arr ), getOffset( arr ), getOrder( arr ) ); // eslint-disable-line max-len\n\n\tif ( dtype === 'generic' ) {\n\t\treturn generic( x );\n\t}\n\tif ( dtype === 'binary' ) {\n\t\treturn binary( x );\n\t}\n\treturn typed( x, dtype );\n}\n\n\n// EXPORTS //\n\nmodule.exports = copyView;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Prepends singleton dimensions in order to satisfy a minimum number of dimensions.\n*\n* @private\n* @param {NonNegativeInteger} ndims - number of dimensions\n* @param {Array} shape - array dimensions\n* @param {NonNegativeInteger} ndmin - minimum number of dimensions\n* @returns {Array} output shape array\n*/\nfunction expandShape( ndims, shape, ndmin ) {\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < ndmin-ndims; i++ ) {\n\t\tout.push( 1 );\n\t}\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tout.push( shape[ i ] );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = expandShape;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar abs = require( '@stdlib/math-base-special-abs' );\n\n\n// MAIN //\n\n/**\n* Expands a strides array to accommodate an expanded array shape (i.e., an array shape with prepended singleton dimensions).\n*\n* @private\n* @param {NonNegativeInteger} ndims - number of dimensions\n* @param {Array} shape - expanded array shape\n* @param {Array} strides - strides array\n* @param {string} order - memory layout order\n* @returns {Array} output strides array\n*\n* @example\n* var out = expandStrides( 4, [ 1, 1, 2, 2 ], [ 1, 2 ], 'column-major' );\n* // returns [ 1, 1, 1, 2 ]\n*\n* @example\n* var out = expandStrides( 4, [ 1, 1, 2, 2 ], [ 2, 1 ], 'row-major' );\n* // returns [ 4, 4, 2, 1 ]\n*/\nfunction expandStrides( ndims, shape, strides, order ) {\n\tvar out;\n\tvar N;\n\tvar s;\n\tvar i;\n\tvar j;\n\n\tN = strides.length;\n\tj = ndims - N;\n\tout = [];\n\tif ( isRowMajor( order ) ) {\n\t\ts = abs( strides[ 0 ] ) * shape[ j ]; // at `j` is the size of the first non-prepended dimension\n\t\tfor ( i = 0; i < j; i++ ) {\n\t\t\tout.push( s );\n\t\t}\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tout.push( strides[ i ] );\n\t\t}\n\t} else { // column-major\n\t\tfor ( i = 0; i < j; i++ ) {\n\t\t\tout.push( 1 );\n\t\t}\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tout.push( strides[ i ] );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = expandStrides;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isArray = require( '@stdlib/assert-is-array' );\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar shape2strides = require( '@stdlib/ndarray-base-shape2strides' );\nvar strides2offset = require( '@stdlib/ndarray-base-strides2offset' );\nvar strides2order = require( '@stdlib/ndarray-base-strides2order' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar ndarray = require( '@stdlib/ndarray-ctor' );\nvar isColumnMajor = require( '@stdlib/ndarray-base-assert-is-column-major-string' );\nvar isDataType = require( '@stdlib/ndarray-base-assert-is-data-type' );\nvar isOrder = require( '@stdlib/ndarray-base-assert-is-order' );\nvar isCastingMode = require( '@stdlib/ndarray-base-assert-is-casting-mode' );\nvar isAllowedCast = require( '@stdlib/ndarray-base-assert-is-allowed-data-type-cast' );\nvar createBuffer = require( '@stdlib/ndarray-base-buffer' );\nvar getBufferDType = require( '@stdlib/ndarray-base-buffer-dtype' );\nvar getDType = require( '@stdlib/ndarray-dtype' );\nvar getShape = require( '@stdlib/ndarray-shape' );\nvar getStrides = require( '@stdlib/ndarray-strides' );\nvar getOffset = require( '@stdlib/ndarray-offset' );\nvar getOrder = require( '@stdlib/ndarray-order' );\nvar getData = require( '@stdlib/ndarray-data-buffer' );\nvar arrayShape = require( '@stdlib/array-shape' );\nvar flatten = require( '@stdlib/array-base-flatten' );\nvar format = require( '@stdlib/string-format' );\nvar isArrayLikeObject = require( './is_array_like_object.js' );\nvar getDefaults = require( './defaults.js' );\nvar castBuffer = require( './cast_buffer.js' );\nvar copyView = require( './copy_view.js' );\nvar expandShape = require( './expand_shape.js' );\nvar expandStrides = require( './expand_strides.js' );\n\n\n// VARIABLES //\n\nvar defaults = getDefaults();\n\n\n// MAIN //\n\n/**\n* Returns a multidimensional array.\n*\n* @param {(ArrayLikeObject|TypedArrayLike|Buffer|ndarrayLike)} [buffer] - data source\n* @param {Options} [options] - function options\n* @param {(ArrayLikeObject|TypedArrayLike|Buffer|ndarrayLike)} [options.buffer] - data source\n* @param {string} [options.dtype=\"float64\"] - underlying storage data type (if the input data is not of the same type, this option specifies the data type to which to cast the input data)\n* @param {string} [options.order=\"row-major\"] - specifies the memory layout of the array as either row-major (C-style) or column-major (Fortran-style)\n* @param {NonNegativeIntegerArray} [options.shape] - array shape\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.copy=false] - boolean indicating whether to copy source data to a new data buffer\n* @param {boolean} [options.flatten=true] - boolean indicating whether to automatically flatten generic array data sources\n* @param {NonNegativeInteger} [options.ndmin=0] - minimum number of dimensions\n* @param {string} [options.casting=\"safe\"] - casting rule used to determine what constitutes an acceptable cast\n* @param {boolean} [options.readonly=false] - boolean indicating if an array should be read-only\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide either an array shape, data source, or both\n* @throws {Error} invalid cast\n* @throws {RangeError} data source must be compatible with specified meta data\n* @returns {ndarray} ndarray instance\n*\n* @example\n* var arr = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var v = arr.get( 0, 0 );\n* // returns 1\n*\n* @example\n* var opts = {\n*     'dtype': 'generic',\n*     'flatten': false\n* };\n*\n* var arr = array( [ [ 1, 2 ], [ 3, 4 ] ], opts );\n* // returns <ndarray>\n*\n* var v = arr.get( 0 );\n* // returns [ 1, 2 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var opts = {\n*     'shape': [ 2, 2 ]\n* };\n*\n* var arr = array( new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] ), opts );\n* // returns <ndarray>\n*\n* var v = arr.get( 0, 0 );\n* // returns 1.0\n*/\nfunction array() {\n\tvar options;\n\tvar strides;\n\tvar buffer;\n\tvar offset;\n\tvar order;\n\tvar dtype;\n\tvar btype;\n\tvar shape;\n\tvar ndims;\n\tvar nopts;\n\tvar opts;\n\tvar osh;\n\tvar len;\n\tvar ord;\n\tvar FLG;\n\n\tif ( arguments.length === 1 ) {\n\t\tif ( isArrayLikeObject( arguments[ 0 ] ) ) {\n\t\t\tbuffer = arguments[ 0 ];\n\t\t\toptions = {};\n\t\t} else {\n\t\t\toptions = arguments[ 0 ];\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either a valid data source, options argument, or both. Value: `%s`.', options ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( options, 'buffer' ) ) {\n\t\t\t\tbuffer = options.buffer;\n\t\t\t\tif ( !isArrayLikeObject( buffer ) ) { // weak test\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be an array-like object, typed-array-like, a Buffer, or an ndarray. Option: `%s`.', 'buffer', buffer ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\tbuffer = arguments[ 0 ];\n\t\tif ( !isArrayLikeObject( buffer ) ) { // weak test\n\t\t\tthrow new TypeError( format( 'invalid option. Data source must be an array-like object, typed-array-like, a Buffer, or an ndarray. Value: `%s`.', buffer ) );\n\t\t}\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\t// Note: we ignore whether `options` has a `buffer` property\n\t}\n\tif ( buffer ) {\n\t\tif ( isndarrayLike( buffer ) ) {\n\t\t\tbtype = getDType( buffer );\n\t\t\tFLG = true;\n\t\t} else {\n\t\t\tbtype = getBufferDType( buffer ) || 'generic'; // fallback to a \"generic\" dtype when provided, e.g., a generic accessor array as a data source\n\t\t\tFLG = false;\n\t\t}\n\t}\n\tnopts = {};\n\topts = {};\n\n\t// Validate some options before others...\n\tif ( hasOwnProp( options, 'casting' ) ) {\n\t\topts.casting = options.casting;\n\t\tif ( !isCastingMode( opts.casting ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a recognized casting mode. Option: `%s`.', 'casting', opts.casting ) );\n\t\t}\n\t} else {\n\t\topts.casting = defaults.casting;\n\t}\n\tif ( hasOwnProp( options, 'flatten' ) ) {\n\t\topts.flatten = options.flatten;\n\t\tif ( !isBoolean( opts.flatten ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'flatten', opts.flatten ) );\n\t\t}\n\t} else {\n\t\topts.flatten = defaults.flatten;\n\t}\n\tif ( hasOwnProp( options, 'ndmin' ) ) {\n\t\topts.ndmin = options.ndmin;\n\t\tif ( !isNonNegativeInteger( opts.ndmin ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'ndmin', opts.ndmin ) );\n\t\t}\n\t\t// TODO: validate that minimum number of dimensions does not exceed the maximum number of possible dimensions (in theory, infinite; in practice, determined by max array length; see https://github.com/stdlib-js/stdlib/blob/ac350059877c036640775d6b30d0e98e840d07cf/lib/node_modules/%40stdlib/ndarray/ctor/lib/main.js#L57)\n\t} else {\n\t\topts.ndmin = defaults.ndmin;\n\t}\n\n\t// Validate the remaining options...\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\tdtype = options.dtype;\n\t\tif ( !isDataType( dtype ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a recognized data type. Option: `%s`.', 'dtype', dtype ) );\n\t\t}\n\t\tif ( btype && !isAllowedCast( btype, dtype, opts.casting ) ) {\n\t\t\tthrow new Error( format( 'invalid option. Data type cast is not allowed. Casting mode: `%s`. From: `%s`. To: `%s`.', opts.casting, btype, dtype ) );\n\t\t}\n\t} else if ( btype ) { // btype !== void 0\n\t\t// TODO: reconcile difference in behavior when provided a generic array and no `dtype` option. Currently, we cast here, but do not allow casting a generic array (by default) when explicitly providing a `dtype` option.\n\n\t\t// Only cast generic array data sources when not provided an ndarray...\n\t\tif ( !FLG && btype === 'generic' ) {\n\t\t\tdtype = defaults.dtype;\n\t\t} else {\n\t\t\tdtype = btype;\n\t\t}\n\t} else {\n\t\tdtype = defaults.dtype;\n\t}\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\torder = options.order;\n\t\tif ( order === 'any' || order === 'same' ) {\n\t\t\tif ( FLG ) {\n\t\t\t\t// If the user indicated that \"any\" order suffices (meaning the user does not care about ndarray order), then we use the default order, unless the input ndarray is either unequivocally \"row-major\" or \"column-major\" or configured as such....\n\t\t\t\tif ( order === 'any' ) {\n\t\t\t\t\t// Compute the layout order in order to ascertain whether an ndarray can be considered both \"row-major\" and \"column-major\":\n\t\t\t\t\tord = strides2order( getStrides( buffer ) );\n\n\t\t\t\t\t// If the ndarray can be considered both \"row-major\" and \"column-major\", then use the default order; otherwise, use the ndarray's stated layout order...\n\t\t\t\t\tif ( ord === 3 ) {\n\t\t\t\t\t\torder = defaults.order;\n\t\t\t\t\t} else {\n\t\t\t\t\t\torder = getOrder( buffer );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Otherwise, use the same order as the provided ndarray...\n\t\t\t\telse if ( order === 'same' ) {\n\t\t\t\t\torder = getOrder( buffer );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\torder = defaults.order;\n\t\t\t}\n\t\t} else if ( !isOrder( order ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a recognized order. Option: `%s`.', 'order', order ) );\n\t\t}\n\t} else {\n\t\torder = defaults.order;\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\tnopts.mode = options.mode;\n\t} else {\n\t\tnopts.mode = defaults.mode;\n\t}\n\tif ( hasOwnProp( options, 'submode' ) ) {\n\t\tnopts.submode = options.submode;\n\t} else {\n\t\tnopts.submode = [ nopts.mode ];\n\t}\n\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\tnopts.readonly = options.readonly;\n\t} else {\n\t\tnopts.readonly = defaults.readonly;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t\tif ( !isBoolean( opts.copy ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t}\n\t} else {\n\t\topts.copy = defaults.copy;\n\t}\n\t// If not provided a shape, infer from a provided data source...\n\tif ( hasOwnProp( options, 'shape' ) ) {\n\t\tshape = options.shape;\n\t\tif ( !isArrayLikeObject( shape ) ) { // weak test\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be an array-like object containing nonnegative integers. Option: `%s`.', 'shape', shape ) );\n\t\t}\n\t\tndims = shape.length;\n\t\tlen = numel( shape );\n\t} else if ( buffer ) {\n\t\tif ( FLG ) {\n\t\t\tshape = getShape( buffer );\n\t\t\tndims = shape.length;\n\t\t\tlen = numel( shape );\n\t\t} else if ( opts.flatten && isArray( buffer ) ) {\n\t\t\tshape = arrayShape( buffer );\n\t\t\tosh = shape; // cache a reference to the inferred shape\n\t\t\tndims = shape.length;\n\t\t\tlen = numel( shape );\n\t\t} else {\n\t\t\tndims = 1;\n\t\t\tlen = buffer.length;\n\t\t\tshape = [ len ]; // assume a 1-dimensional array (vector)\n\t\t}\n\t} else {\n\t\tthrow new Error( 'invalid arguments. Must provide either a data source, array shape, or both.' );\n\t}\n\t// Adjust the array shape to satisfy the minimum number of dimensions...\n\tif ( ndims < opts.ndmin ) {\n\t\tshape = expandShape( ndims, shape, opts.ndmin );\n\t\tndims = opts.ndmin;\n\t}\n\t// If not provided a data buffer, create it; otherwise, see if we need to cast a provided data buffer to another data type or perform a copy...\n\tif ( FLG ) {\n\t\tif ( numel( buffer.shape ) !== len ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Array shape is incompatible with provided data source. Number of data source elements does not match array shape.' );\n\t\t}\n\t\tif ( btype !== dtype || opts.copy ) {\n\t\t\tbuffer = copyView( buffer, dtype );\n\t\t} else {\n\t\t\tstrides = getStrides( buffer );\n\t\t\toffset = getOffset( buffer );\n\t\t\tbuffer = getData( buffer );\n\t\t\tif ( strides.length < ndims ) {\n\t\t\t\t// Account for augmented dimensions (note: expanding the strides array to account for prepended singleton dimensions does **not** affect the index offset):\n\t\t\t\tstrides = expandStrides( ndims, shape, strides, order );\n\t\t\t}\n\t\t}\n\t} else if ( buffer ) {\n\t\tif ( btype === 'generic' && opts.flatten && isArray( buffer ) ) {\n\t\t\tbuffer = flatten( buffer, osh || arrayShape( buffer ), isColumnMajor( order ) );\n\t\t}\n\t\tif ( buffer.length !== len ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Array shape is incompatible with provided data source. Number of data source elements does not match array shape.' );\n\t\t}\n\t\tif ( btype !== dtype || opts.copy ) {\n\t\t\tbuffer = castBuffer( buffer, len, dtype );\n\t\t}\n\t} else {\n\t\tbuffer = createBuffer( dtype, len );\n\t}\n\t// If we have yet to determine array strides, we assume that we can compute the strides, along with the index offset, for a **contiguous** data source based solely on the array shape and specified memory layout order...\n\tif ( strides === void 0 ) {\n\t\tstrides = shape2strides( shape, order );\n\t\toffset = strides2offset( shape, strides );\n\t}\n\treturn new ndarray( dtype, buffer, shape, strides, offset, order, nopts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = array;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Multidimensional array.\n*\n* @module @stdlib/ndarray-array\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n*\n* var arr = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var v = arr.get( 0, 0 );\n* // returns 1\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n*\n* var opts = {\n*     'dtype': 'generic',\n*     'flatten': false\n* };\n*\n* var arr = array( [ [ 1, 2 ], [ 3, 4 ] ], opts );\n* // returns <ndarray>\n*\n* var v = arr.get( 0 );\n* // returns [ 1, 2 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var array = require( '@stdlib/ndarray-array' );\n*\n* var opts = {\n*     'shape': [ 2, 2 ]\n* };\n*\n* var arr = array( new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] ), opts );\n* // returns <ndarray>\n*\n* var v = arr.get( 0, 0 );\n* // returns 1.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_is_array_like_object", "__commonJSMin", "exports", "module", "PINF", "isInteger", "isArrayLikeObject", "value", "require_defaults", "__commonJSMin", "exports", "module", "settings", "defaults", "require_cast_buffer", "__commonJSMin", "exports", "module", "bufferCtors", "allocUnsafe", "castBuffer", "buffer", "len", "dtype", "ctor", "out", "i", "require_copy_view", "__commonJSMin", "exports", "module", "arraylike2object", "castReturn", "complexCtors", "bufferCtors", "allocUnsafe", "ndarray", "getDType", "getShape", "getStrides", "getOffset", "getOrder", "getData", "generic", "arr", "len", "out", "i", "binary", "typed", "dtype", "ctor", "set", "fcn", "o", "wrapper", "copyView", "x", "require_expand_shape", "__commonJSMin", "exports", "module", "expandShape", "ndims", "shape", "ndmin", "out", "require_expand_strides", "__commonJSMin", "exports", "module", "isRowMajor", "abs", "expandStrides", "ndims", "shape", "strides", "order", "out", "N", "s", "i", "j", "require_main", "__commonJSMin", "exports", "module", "hasOwnProp", "isObject", "isBoolean", "isArray", "isNonNegativeInteger", "isndarrayLike", "shape2strides", "strides2offset", "strides2order", "numel", "ndarray", "isColumnMajor", "isDataType", "isOrder", "isCastingMode", "isAllowedCast", "createBuffer", "getBufferDType", "getDType", "getShape", "getStrides", "getOffset", "getOrder", "getData", "arrayShape", "flatten", "format", "isArrayLikeObject", "getDefaults", "castBuffer", "copyView", "expandShape", "expandStrides", "defaults", "array", "options", "strides", "buffer", "offset", "order", "dtype", "btype", "shape", "ndims", "nopts", "opts", "osh", "len", "ord", "FLG", "main"]
}
