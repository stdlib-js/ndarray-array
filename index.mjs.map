{"version":3,"file":"index.mjs","sources":["../lib/is_array_like_object.js","../lib/cast_buffer.js","../lib/copy_view.js","../lib/expand_shape.js","../lib/expand_strides.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar isInteger = require( '@stdlib/math-base-assert-is-integer' );\n\n\n// MAIN //\n\n/**\n* Tests (loosely) if an input value is an array-like object.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if an input value is an array-like object\n*\n* @example\n* var bool = isArrayLikeObject( [] );\n* // returns true\n*\n* @example\n* var bool = isArrayLikeObject( '' );\n* // returns false\n*/\nfunction isArrayLikeObject( value ) {\n\treturn (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\ttypeof value.length === 'number' &&\n\t\tisInteger( value.length ) &&\n\t\tvalue.length >= 0 &&\n\t\tvalue.length < PINF\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isArrayLikeObject;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar bufferCtors = require( '@stdlib/ndarray-base-buffer-ctors' );\nvar allocUnsafe = require( '@stdlib/buffer-alloc-unsafe' );\n\n\n// MAIN //\n\n/**\n* Casts buffer elements by copying those elements to a buffer of another data type.\n*\n* @private\n* @param {(Array|TypedArray|Buffer)} buffer - input buffer\n* @param {NonNegativeInteger} len - number of elements to cast\n* @param {string} dtype - data type\n* @returns {(Array|TypedArray|Buffer)} output buffer\n*\n* @example\n* var b = castBuffer( [ 1.0, 2.0, 3.0 ], 3, 'float64' );\n* // returns <Float64Array>[ 1.0, 2.0, 3.0 ]\n*/\nfunction castBuffer( buffer, len, dtype ) {\n\tvar ctor;\n\tvar out;\n\tvar i;\n\n\tctor = bufferCtors( dtype );\n\tif ( dtype === 'generic') {\n\t\tout = [];\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tout.push( buffer[ i ] );\n\t\t}\n\t} else if ( dtype === 'binary' ) {\n\t\tout = allocUnsafe( len );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tout[ i ] = buffer[ i ];\n\t\t}\n\t} else {\n\t\tout = new ctor( len );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tout[ i ] = buffer[ i ]; // TODO: wrap and use accessors here and above\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = castBuffer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar bufferCtors = require( '@stdlib/ndarray-base-buffer-ctors' );\nvar allocUnsafe = require( '@stdlib/buffer-alloc-unsafe' );\n\n\n// FUNCTIONS //\n\n/**\n* Copies a \"generic\" ndarray view.\n*\n* @private\n* @param {ndarray} arr - input ndarray\n* @returns {Array} output data buffer\n*/\nfunction generic( arr ) {\n\tvar len;\n\tvar out;\n\tvar i;\n\n\tlen = arr.length;\n\tout = [];\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout.push( arr.get( i ) ); // FIXME: what if `arr` has more than one dimensions?\n\t}\n\treturn out;\n}\n\n/**\n* Copies a \"binary\" ndarray view.\n*\n* @private\n* @param {ndarray} arr - input ndarray\n* @returns {Array} output data buffer\n*/\nfunction binary( arr ) {\n\tvar len;\n\tvar out;\n\tvar i;\n\n\tlen = arr.length;\n\tout = allocUnsafe( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout[ i ] = arr.get( i ); // FIXME: what if `arr` has more than one dimensions?\n\t}\n\treturn out;\n}\n\n/**\n* Copies a \"typed\" ndarray view.\n*\n* @private\n* @param {ndarray} arr - input ndarray\n* @param {string} dtype - data type\n* @returns {Array} output data buffer\n*/\nfunction typed( arr, dtype ) {\n\tvar ctor;\n\tvar len;\n\tvar out;\n\tvar i;\n\n\tctor = bufferCtors( dtype );\n\tlen = arr.length;\n\tout = new ctor( len ); // FIXME: need to account for complex number arrays; in which case, we may want to do something similar to `array/convert`\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout[ i ] = arr.get( i ); // FIXME: what if `arr` has more than one dimensions?\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Copies an ndarray view to a data buffer.\n*\n* @private\n* @param {ndarray} arr - input ndarray\n* @param {string} dtype - data type\n* @returns {(Array|TypedArray|Buffer)} output data buffer\n*\n* @example\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n*\n* var buffer = [ 1.0, 2.0, 3.0 ];\n* var shape = [ 3 ];\n* var strides = [ -1 ];\n* var vec = ndarray( 'generic', buffer, shape, strides, 2, 'row-major' );\n*\n* var b = copyView( vec, 'float64' );\n* // returns <Float64Array>[ 3.0, 2.0, 1.0 ]\n*/\nfunction copyView( arr, dtype ) {\n\t// TODO: handle complex number dtypes!!\n\tif ( dtype === 'generic') {\n\t\treturn generic( arr );\n\t}\n\tif ( dtype === 'binary' ) {\n\t\treturn binary( arr );\n\t}\n\treturn typed( arr, dtype );\n}\n\n\n// EXPORTS //\n\nmodule.exports = copyView;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Prepends singleton dimensions in order to satisfy a minimum number of dimensions.\n*\n* @private\n* @param {NonNegativeInteger} ndims - number of dimensions\n* @param {Array} shape - array dimensions\n* @param {NonNegativeInteger} ndmin - minimum number of dimensions\n* @returns {Array} output shape array\n*/\nfunction expandShape( ndims, shape, ndmin ) {\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < ndmin-ndims; i++ ) {\n\t\tout.push( 1 );\n\t}\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tout.push( shape[ i ] );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = expandShape;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\n\n\n// MAIN //\n\n/**\n* Expands a strides array to accommodate an expanded array shape (i.e., an array shape with prepended singleton dimensions).\n*\n* @private\n* @param {NonNegativeInteger} ndims - number of dimensions\n* @param {Array} shape - expanded array shape\n* @param {Array} strides - strides array\n* @param {string} order - memory layout order\n* @returns {Array} output strides array\n*\n* @example\n* var out = expandStrides( 4, [ 1, 1, 2, 2 ], [ 1, 2 ], 'column-major' );\n* // returns [ 1, 1, 1, 2 ]\n*\n* @example\n* var out = expandStrides( 4, [ 1, 1, 2, 2 ], [ 2, 1 ], 'row-major' );\n* // returns [ 4, 4, 2, 1 ]\n*/\nfunction expandStrides( ndims, shape, strides, order ) {\n\tvar out;\n\tvar N;\n\tvar s;\n\tvar i;\n\tvar j;\n\n\tN = strides.length;\n\tj = ndims - N;\n\tout = [];\n\tif ( order === 'row-major' ) {\n\t\ts = abs( strides[ 0 ] ) * shape[ j ]; // at `j` is the size of the first non-prepended dimension\n\t\tfor ( i = 0; i < j; i++ ) {\n\t\t\tout.push( s );\n\t\t}\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tout.push( strides[ i ] );\n\t\t}\n\t} else { // column-major\n\t\tfor ( i = 0; i < j; i++ ) {\n\t\t\tout.push( 1 );\n\t\t}\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tout.push( strides[ i ] );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = expandStrides;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isArray = require( '@stdlib/assert-is-array' );\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar shape2strides = require( '@stdlib/ndarray-base-shape2strides' );\nvar strides2offset = require( '@stdlib/ndarray-base-strides2offset' );\nvar strides2order = require( '@stdlib/ndarray-base-strides2order' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar ndarray = require( '@stdlib/ndarray-ctor' );\nvar isDataType = require( '@stdlib/ndarray-base-assert-is-data-type' );\nvar isOrder = require( '@stdlib/ndarray-base-assert-is-order' );\nvar isCastingMode = require( '@stdlib/ndarray-base-assert-is-casting-mode' );\nvar isAllowedCast = require( '@stdlib/ndarray-base-assert-is-allowed-data-type-cast' );\nvar createBuffer = require( '@stdlib/ndarray-base-buffer' );\nvar getType = require( '@stdlib/ndarray-base-buffer-dtype' );\nvar arrayShape = require( '@stdlib/array-shape' );\nvar flattenArray = require( '@stdlib/utils-flatten-array' );\nvar format = require( '@stdlib/string-format' );\nvar isArrayLikeObject = require( './is_array_like_object.js' );\nvar defaults = require( './defaults.json' );\nvar castBuffer = require( './cast_buffer.js' );\nvar copyView = require( './copy_view.js' );\nvar expandShape = require( './expand_shape.js' );\nvar expandStrides = require( './expand_strides.js' );\n\n\n// MAIN //\n\n/**\n* Returns a multidimensional array.\n*\n* @param {(ArrayLikeObject|TypedArrayLike|Buffer|ndarrayLike)} [buffer] - data source\n* @param {Options} [options] - function options\n* @param {(ArrayLikeObject|TypedArrayLike|Buffer|ndarrayLike)} [options.buffer] - data source\n* @param {string} [options.dtype=\"float64\"] - underlying storage data type (if the input data is not of the same type, this option specifies the data type to which to cast the input data)\n* @param {string} [options.order=\"row-major\"] - specifies the memory layout of the array as either row-major (C-style) or column-major (Fortran-style)\n* @param {NonNegativeIntegerArray} [options.shape] - array shape\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.copy=false] - boolean indicating whether to copy source data to a new data buffer\n* @param {boolean} [options.flatten=true] - boolean indicating whether to automatically flatten generic array data sources\n* @param {NonNegativeInteger} [options.ndmin=0] - minimum number of dimensions\n* @param {string} [options.casting=\"safe\"] - casting rule used to determine what constitutes an acceptable cast\n* @param {boolean} [options.readonly=false] - boolean indicating if an array should be read-only\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide either an array shape, data source, or both\n* @throws {Error} invalid cast\n* @throws {RangeError} data source must be compatible with specified meta data\n* @returns {ndarray} ndarray instance\n*\n* @example\n* var arr = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var v = arr.get( 0, 0 );\n* // returns 1\n*\n* @example\n* var opts = {\n*     'dtype': 'generic',\n*     'flatten': false\n* };\n*\n* var arr = array( [ [ 1, 2 ], [ 3, 4 ] ], opts );\n* // returns <ndarray>\n*\n* var v = arr.get( 0 );\n* // returns [ 1, 2 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var opts = {\n*     'shape': [ 2, 2 ]\n* };\n*\n* var arr = array( new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] ), opts );\n* // returns <ndarray>\n*\n* var v = arr.get( 0, 0 );\n* // returns 1.0\n*/\nfunction array() {\n\tvar options;\n\tvar strides;\n\tvar buffer;\n\tvar offset;\n\tvar order;\n\tvar dtype;\n\tvar btype;\n\tvar shape;\n\tvar ndims;\n\tvar nopts;\n\tvar opts;\n\tvar len;\n\tvar ord;\n\tvar FLG;\n\n\tif ( arguments.length === 1 ) {\n\t\tif ( isArrayLikeObject( arguments[ 0 ] ) ) {\n\t\t\tbuffer = arguments[ 0 ];\n\t\t\toptions = {};\n\t\t} else {\n\t\t\toptions = arguments[ 0 ];\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either a valid data source, options argument, or both. Value: `%s`.', options ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( options, 'buffer' ) ) {\n\t\t\t\tbuffer = options.buffer;\n\t\t\t\tif ( !isArrayLikeObject( buffer ) ) { // weak test\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be an array-like object, typed-array-like, a Buffer, or an ndarray. Option: `%s`.', 'buffer', buffer ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\tbuffer = arguments[ 0 ];\n\t\tif ( !isArrayLikeObject( buffer ) ) { // weak test\n\t\t\tthrow new TypeError( format( 'invalid option. Data source must be an array-like object, typed-array-like, a Buffer, or an ndarray. Value: `%s`.' , buffer ) );\n\t\t}\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\t// Note: we ignore whether `options` has a `buffer` property\n\t}\n\tif ( buffer ) {\n\t\tif ( isndarrayLike( buffer ) ) {\n\t\t\tbtype = buffer.dtype;\n\t\t\tFLG = true;\n\t\t} else {\n\t\t\tbtype = getType( buffer );\n\t\t\tFLG = false;\n\t\t}\n\t}\n\tnopts = {};\n\topts = {};\n\n\t// Validate some options before others...\n\tif ( hasOwnProp( options, 'casting' ) ) {\n\t\topts.casting = options.casting;\n\t\tif ( !isCastingMode( opts.casting ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a recognized casting mode. Option: `%s`.', 'casting', opts.casting ) );\n\t\t}\n\t} else {\n\t\topts.casting = defaults.casting;\n\t}\n\tif ( hasOwnProp( options, 'flatten' ) ) {\n\t\topts.flatten = options.flatten;\n\t\tif ( !isBoolean( opts.flatten ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'flatten', opts.flatten ) );\n\t\t}\n\t} else {\n\t\topts.flatten = defaults.flatten;\n\t}\n\tif ( hasOwnProp( options, 'ndmin' ) ) {\n\t\topts.ndmin = options.ndmin;\n\t\tif ( !isNonNegativeInteger( opts.ndmin ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'ndmin', opts.ndmin ) );\n\t\t}\n\t\t// TODO: validate that minimum number of dimensions does not exceed the maximum number of possible dimensions (in theory, infinite; in practice, determined by max array length; see https://github.com/stdlib-js/stdlib/blob/ac350059877c036640775d6b30d0e98e840d07cf/lib/node_modules/%40stdlib/ndarray/ctor/lib/main.js#L57)\n\t} else {\n\t\topts.ndmin = defaults.ndmin;\n\t}\n\n\t// Validate the remaining options...\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\tdtype = options.dtype;\n\t\tif ( !isDataType( dtype ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a recognized data type. Option: `%s`.', 'dtype', dtype ) );\n\t\t}\n\t\tif ( btype && !isAllowedCast( btype, dtype, opts.casting ) ) {\n\t\t\tthrow new Error( format( 'invalid option. Data type cast is not allowed. Casting mode: `%s`. From: `%s`. To: `%s`.', opts.casting, btype, dtype ) );\n\t\t}\n\t} else if ( btype ) {\n\t\t// TODO: reconcile difference in behavior when provided a generic array and no `dtype` option. Currently, we cast here, but do not allow casting a generic array (by default) when explicitly providing a `dtype` option.\n\n\t\t// Only cast generic array data sources when not provided an ndarray...\n\t\tif ( !FLG && btype === 'generic' ) {\n\t\t\tdtype = defaults.dtype;\n\t\t} else {\n\t\t\tdtype = btype;\n\t\t}\n\t} else {\n\t\tdtype = defaults.dtype;\n\t}\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\torder = options.order;\n\t\tif ( order === 'any' || order === 'same' ) {\n\t\t\tif ( FLG ) {\n\t\t\t\t// If the user indicated that \"any\" order suffices (meaning the user does not care about ndarray order), then we use the default order, unless the input ndarray is either unequivocally \"row-major\" or \"column-major\" or configured as such....\n\t\t\t\tif ( order === 'any' ) {\n\t\t\t\t\t// Compute the layout order in order to ascertain whether an ndarray can be considered both \"row-major\" and \"column-major\":\n\t\t\t\t\tord = strides2order( buffer.strides );\n\n\t\t\t\t\t// If the ndarray can be considered both \"row-major\" and \"column-major\", then use the default order; otherwise, use the ndarray's stated layout order...\n\t\t\t\t\tif ( ord === 3 ) {\n\t\t\t\t\t\torder = defaults.order;\n\t\t\t\t\t} else {\n\t\t\t\t\t\torder = buffer.order;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Otherwise, use the same order as the provided ndarray...\n\t\t\t\telse if ( order === 'same' ) {\n\t\t\t\t\torder = buffer.order;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\torder = defaults.order;\n\t\t\t}\n\t\t} else if ( !isOrder( order ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a recognized order. Option: `%s`.', 'order', order ) );\n\t\t}\n\t} else {\n\t\torder = defaults.order;\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\tnopts.mode = options.mode;\n\t} else {\n\t\tnopts.mode = defaults.mode;\n\t}\n\tif ( hasOwnProp( options, 'submode' ) ) {\n\t\tnopts.submode = options.submode;\n\t} else {\n\t\tnopts.submode = [ nopts.mode ];\n\t}\n\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\tnopts.readonly = options.readonly;\n\t} else {\n\t\tnopts.readonly = defaults.readonly;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t\tif ( !isBoolean( opts.copy ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t}\n\t} else {\n\t\topts.copy = defaults.copy;\n\t}\n\t// If not provided a shape, infer from a provided data source...\n\tif ( hasOwnProp( options, 'shape' ) ) {\n\t\tshape = options.shape;\n\t\tif ( !isArrayLikeObject( shape ) ) { // weak test\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be an array-like object containing nonnegative integers. Option: `%s`.', 'shape', shape ) );\n\t\t}\n\t\tndims = shape.length;\n\t\tlen = numel( shape );\n\t} else if ( buffer ) {\n\t\tif ( FLG ) {\n\t\t\tshape = buffer.shape;\n\t\t\tndims = buffer.ndims;\n\t\t\tlen = buffer.length;\n\t\t} else if ( opts.flatten && isArray( buffer ) ) {\n\t\t\tshape = arrayShape( buffer );\n\t\t\tndims = shape.length;\n\t\t\tlen = numel( shape );\n\t\t} else {\n\t\t\tndims = 1;\n\t\t\tlen = buffer.length;\n\t\t\tshape = [ len ]; // assume a 1-dimensional array (vector)\n\t\t}\n\t} else {\n\t\tthrow new Error( 'invalid arguments. Must provide either a data source, array shape, or both.' );\n\t}\n\t// Adjust the array shape to satisfy the minimum number of dimensions...\n\tif ( ndims < opts.ndmin ) {\n\t\tshape = expandShape( ndims, shape, opts.ndmin );\n\t\tndims = opts.ndmin;\n\t}\n\t// If not provided a data buffer, create it; otherwise, see if we need to cast a provided data buffer to another data type or perform a copy...\n\tif ( FLG ) {\n\t\tif ( buffer.length !== len ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Array shape is incompatible with provided data source. Number of data source elements does not match array shape.' );\n\t\t}\n\t\tif ( btype !== dtype || opts.copy ) {\n\t\t\tbuffer = copyView( buffer, dtype );\n\t\t} else {\n\t\t\tstrides = buffer.strides;\n\t\t\toffset = buffer.offset;\n\t\t\tbuffer = buffer.data;\n\t\t\tif ( strides.length < ndims ) {\n\t\t\t\t// Account for augmented dimensions (note: expanding the strides array to account for prepended singleton dimensions does **not** affect the index offset):\n\t\t\t\tstrides = expandStrides( ndims, shape, strides, order );\n\t\t\t}\n\t\t}\n\t} else if ( buffer ) {\n\t\tif ( btype === 'generic' && opts.flatten ) {\n\t\t\tbuffer = flattenArray( buffer );\n\t\t}\n\t\tif ( buffer.length !== len ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Array shape is incompatible with provided data source. Number of data source elements does not match array shape.' );\n\t\t}\n\t\tif ( btype !== dtype || opts.copy ) {\n\t\t\tbuffer = castBuffer( buffer, len, dtype );\n\t\t}\n\t} else {\n\t\tbuffer = createBuffer( dtype, len );\n\t}\n\t// If we have yet to determine array strides, we assume that we can compute the strides, along with the index offset, for a **contiguous** data source based solely on the array shape and specified memory layout order...\n\tif ( strides === void 0 ) {\n\t\tstrides = shape2strides( shape, order );\n\t\toffset = strides2offset( shape, strides );\n\t}\n\treturn new ndarray( dtype, buffer, shape, strides, offset, order, nopts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Multidimensional array.\n*\n* @module @stdlib/ndarray-array\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n*\n* var arr = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var v = arr.get( 0, 0 );\n* // returns 1\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n*\n* var opts = {\n*     'dtype': 'generic',\n*     'flatten': false\n* };\n*\n* var arr = array( [ [ 1, 2 ], [ 3, 4 ] ], opts );\n* // returns <ndarray>\n*\n* var v = arr.get( 0 );\n* // returns [ 1, 2 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var array = require( '@stdlib/ndarray-array' );\n*\n* var opts = {\n*     'shape': [ 2, 2 ]\n* };\n*\n* var arr = array( new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] ), opts );\n* // returns <ndarray>\n*\n* var v = arr.get( 0, 0 );\n* // returns 1.0\n*/\n\n// MODULES //\n\nvar array = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = array;\n"],"names":["PINF","require$$0","isInteger","require$$1","is_array_like_object","value","length","bufferCtors","allocUnsafe","cast_buffer","buffer","len","dtype","ctor","out","i","push","copy_view","arr","get","generic","binary","typed","expand_shape","ndims","shape","ndmin","abs","expand_strides","strides","order","N","s","j","hasOwnProp","isObject","isBoolean","require$$2","isPrimitive","isArray","require$$3","isNonNegativeInteger","require$$4","isndarrayLike","require$$5","shape2strides","require$$6","strides2offset","require$$7","strides2order","require$$8","numel","require$$9","ndarray","require$$10","isDataType","require$$11","isOrder","require$$12","isCastingMode","require$$13","isAllowedCast","require$$14","createBuffer","require$$15","getType","require$$16","arrayShape","require$$17","flattenArray","require$$18","format","require$$19","isArrayLikeObject","require$$20","defaults","require$$21","castBuffer","require$$22","copyView","require$$23","expandShape","require$$24","expandStrides","require$$25","main","options","offset","btype","nopts","opts","FLG","arguments","TypeError","casting","flatten","Error","mode","submode","readonly","copy","RangeError","data","lib"],"mappings":";;suEAsBA,IAAIA,EAAOC,EACPC,EAAYC,EAkChB,IAAAC,EAdA,SAA4BC,GAC3B,MACkB,iBAAVA,GACG,OAAVA,GACwB,iBAAjBA,EAAMC,QACbJ,EAAWG,EAAMC,SACjBD,EAAMC,QAAU,GAChBD,EAAMC,OAASN,4GC5BbO,EAAcN,EACdO,EAAcL,EA8ClB,IAAAM,EA5BA,SAAqBC,EAAQC,EAAKC,GACjC,IAAIC,EACAC,EACAC,EAGJ,GADAF,EAAON,EAAaK,GACL,YAAVA,EAEJ,IADAE,EAAM,GACAC,EAAI,EAAGA,EAAIJ,EAAKI,IACrBD,EAAIE,KAAMN,EAAQK,SAEb,GAAe,WAAVH,EAEX,IADAE,EAAMN,EAAaG,GACbI,EAAI,EAAGA,EAAIJ,EAAKI,IACrBD,EAAKC,GAAML,EAAQK,QAIpB,IADAD,EAAM,IAAID,EAAMF,GACVI,EAAI,EAAGA,EAAIJ,EAAKI,IACrBD,EAAKC,GAAML,EAAQK,GAGrB,OAAOD,GCzCJP,EAAcN,EACdO,EAAcL,EAwGlB,IAAAc,EAdA,SAAmBC,EAAKN,GAEvB,MAAe,YAAVA,EAhFN,SAAkBM,GACjB,IAAIP,EACAG,EACAC,EAIJ,IAFAJ,EAAMO,EAAIZ,OACVQ,EAAM,GACAC,EAAI,EAAGA,EAAIJ,EAAKI,IACrBD,EAAIE,KAAME,EAAIC,IAAKJ,IAEpB,OAAOD,EAuECM,CAASF,GAEF,WAAVN,EA/DN,SAAiBM,GAChB,IAAIP,EACAG,EACAC,EAIJ,IAFAJ,EAAMO,EAAIZ,OACVQ,EAAMN,EAAaG,GACbI,EAAI,EAAGA,EAAIJ,EAAKI,IACrBD,EAAKC,GAAMG,EAAIC,IAAKJ,GAErB,OAAOD,EAsDCO,CAAQH,GA3CjB,SAAgBA,EAAKN,GACpB,IACID,EACAG,EACAC,EAKJ,IADAD,EAAM,IAFCP,EAAaK,GAEd,CADND,EAAMO,EAAIZ,QAEJS,EAAI,EAAGA,EAAIJ,EAAKI,IACrBD,EAAKC,GAAMG,EAAIC,IAAKJ,GAErB,OAAOD,EAiCAQ,CAAOJ,EAAKN,ICzEpB,IAAAW,EAjBA,SAAsBC,EAAOC,EAAOC,GACnC,IAAIZ,EACAC,EAGJ,IADAD,EAAM,GACAC,EAAI,EAAGA,EAAIW,EAAMF,EAAOT,IAC7BD,EAAIE,KAAM,GAEX,IAAMD,EAAI,EAAGA,EAAIS,EAAOT,IACvBD,EAAIE,KAAMS,EAAOV,IAElB,OAAOD,GCpBJa,EAAM1B,EAuDV,IAAA2B,EAhCA,SAAwBJ,EAAOC,EAAOI,EAASC,GAC9C,IAAIhB,EACAiB,EACAC,EACAjB,EACAkB,EAKJ,GAFAA,EAAIT,GADJO,EAAIF,EAAQvB,QAEZQ,EAAM,GACS,cAAVgB,EAAwB,CAE5B,IADAE,EAAIL,EAAKE,EAAS,IAAQJ,EAAOQ,GAC3BlB,EAAI,EAAGA,EAAIkB,EAAGlB,IACnBD,EAAIE,KAAMgB,GAEX,IAAMjB,EAAI,EAAGA,EAAIgB,EAAGhB,IACnBD,EAAIE,KAAMa,EAASd,QAEd,CACN,IAAMA,EAAI,EAAGA,EAAIkB,EAAGlB,IACnBD,EAAIE,KAAM,GAEX,IAAMD,EAAI,EAAGA,EAAIgB,EAAGhB,IACnBD,EAAIE,KAAMa,EAASd,IAGrB,OAAOD,GCjDJoB,EAAajC,EACbkC,EAAWhC,EACXiC,EAAYC,EAAuCC,YACnDC,EAAUC,EACVC,EAAuBC,EAAmDJ,YAC1EK,EAAgBC,EAChBC,EAAgBC,EAChBC,EAAiBC,EACjBC,EAAgBC,EAChBC,EAAQC,EACRC,EAAUC,EACVC,EAAaC,EACbC,EAAUC,EACVC,EAAgBC,EAChBC,EAAgBC,EAChBC,EAAeC,EACfC,GAAUC,EACVC,GAAaC,EACbC,GAAeC,EACfC,GAASC,EACTC,GAAoBC,EACpBC,GAAWC,EACXC,GAAaC,EACbC,GAAWC,EACXC,GAAcC,EACdC,GAAgBC,EA6RpB,IAAAC,GAjOA,WACC,IAAIC,EACAzD,EACAnB,EACA6E,EACAzD,EACAlB,EACA4E,EACA/D,EACAD,EACAiE,EACAC,EACA/E,EAEAgF,EAEJ,GAA0B,IAArBC,UAAUtF,OACd,GAAKmE,GAAmBmB,UAAW,IAClClF,EAASkF,UAAW,GACpBN,EAAU,OACJ,CAEN,IAAMnD,EADNmD,EAAUM,UAAW,IAEpB,MAAM,IAAIC,UAAWtB,GAAQ,qGAAsGe,IAEpI,GAAKpD,EAAYoD,EAAS,YACzB5E,EAAS4E,EAAQ5E,QACX+D,GAAmB/D,IACxB,MAAM,IAAImF,UAAWtB,GAAQ,qHAAsH,SAAU7D,QAI1J,CAEN,IAAM+D,GADN/D,EAASkF,UAAW,IAEnB,MAAM,IAAIC,UAAWtB,GAAQ,oHAAsH7D,IAGpJ,IAAMyB,EADNmD,EAAUM,UAAW,IAEpB,MAAM,IAAIC,UAAWtB,GAAQ,qEAAsEe,IAiBrG,GAbK5E,IACCiC,EAAejC,IACnB8E,EAAQ9E,EAAOE,MACf+E,GAAM,IAENH,EAAQvB,GAASvD,GACjBiF,GAAM,IAGRF,EAAQ,GACRC,EAAO,GAGFxD,EAAYoD,EAAS,YAEzB,GADAI,EAAKI,QAAUR,EAAQQ,SACjBnC,EAAe+B,EAAKI,SACzB,MAAM,IAAID,UAAWtB,GAAQ,+EAAgF,UAAWmB,EAAKI,eAG9HJ,EAAKI,QAAUnB,GAASmB,QAEzB,GAAK5D,EAAYoD,EAAS,YAEzB,GADAI,EAAKK,QAAUT,EAAQS,SACjB3D,EAAWsD,EAAKK,SACrB,MAAM,IAAIF,UAAWtB,GAAQ,+DAAgE,UAAWmB,EAAKK,eAG9GL,EAAKK,QAAUpB,GAASoB,QAEzB,GAAK7D,EAAYoD,EAAS,UAEzB,GADAI,EAAKhE,MAAQ4D,EAAQ5D,OACfe,EAAsBiD,EAAKhE,OAChC,MAAM,IAAImE,UAAWtB,GAAQ,2EAA4E,QAASmB,EAAKhE,aAIxHgE,EAAKhE,MAAQiD,GAASjD,MAIvB,GAAKQ,EAAYoD,EAAS,SAAY,CAErC,GADA1E,EAAQ0E,EAAQ1E,OACV2C,EAAY3C,GACjB,MAAM,IAAIiF,UAAWtB,GAAQ,4EAA6E,QAAS3D,IAEpH,GAAK4E,IAAU3B,EAAe2B,EAAO5E,EAAO8E,EAAKI,SAChD,MAAM,IAAIE,MAAOzB,GAAQ,2FAA4FmB,EAAKI,QAASN,EAAO5E,SAS1IA,EAPU4E,IAILG,GAAiB,YAAVH,GAGJA,EAGDb,GAAS/D,MAElB,GAAKsB,EAAYoD,EAAS,UAEzB,GAAe,SADfxD,EAAQwD,EAAQxD,QACkB,SAAVA,EAClB6D,EAEW,QAAV7D,EAMHA,EADY,IAHPmB,EAAevC,EAAOmB,SAInB8C,GAAS7C,MAETpB,EAAOoB,MAIG,SAAVA,IACTA,EAAQpB,EAAOoB,OAGhBA,EAAQ6C,GAAS7C,WAEZ,IAAM2B,EAAS3B,GACrB,MAAM,IAAI+D,UAAWtB,GAAQ,wEAAyE,QAASzC,SAGhHA,EAAQ6C,GAAS7C,MAiBlB,GAfKI,EAAYoD,EAAS,QACzBG,EAAMQ,KAAOX,EAAQW,KAErBR,EAAMQ,KAAOtB,GAASsB,KAElB/D,EAAYoD,EAAS,WACzBG,EAAMS,QAAUZ,EAAQY,QAExBT,EAAMS,QAAU,CAAET,EAAMQ,MAEpB/D,EAAYoD,EAAS,YACzBG,EAAMU,SAAWb,EAAQa,SAEzBV,EAAMU,SAAWxB,GAASwB,SAEtBjE,EAAYoD,EAAS,SAEzB,GADAI,EAAKU,KAAOd,EAAQc,MACdhE,EAAWsD,EAAKU,MACrB,MAAM,IAAIP,UAAWtB,GAAQ,+DAAgE,OAAQmB,EAAKU,YAG3GV,EAAKU,KAAOzB,GAASyB,KAGtB,GAAKlE,EAAYoD,EAAS,SAAY,CAErC,GADA7D,EAAQ6D,EAAQ7D,OACVgD,GAAmBhD,GACxB,MAAM,IAAIoE,UAAWtB,GAAQ,0GAA2G,QAAS9C,IAElJD,EAAQC,EAAMnB,OACdK,EAAMwC,EAAO1B,OACP,CAAA,IAAKf,EAeX,MAAM,IAAIsF,MAAO,+EAdZL,GACJlE,EAAQf,EAAOe,MACfD,EAAQd,EAAOc,MACfb,EAAMD,EAAOJ,QACFoF,EAAKK,SAAWxD,EAAS7B,IAEpCc,GADAC,EAAQ0C,GAAYzD,IACNJ,OACdK,EAAMwC,EAAO1B,KAEbD,EAAQ,EAERC,EAAQ,CADRd,EAAMD,EAAOJ,SAYf,GALKkB,EAAQkE,EAAKhE,QACjBD,EAAQwD,GAAazD,EAAOC,EAAOiE,EAAKhE,OACxCF,EAAQkE,EAAKhE,OAGTiE,EAAM,CACV,GAAKjF,EAAOJ,SAAWK,EACtB,MAAM,IAAI0F,WAAY,wIAElBb,IAAU5E,GAAS8E,EAAKU,KAC5B1F,EAASqE,GAAUrE,EAAQE,IAE3BiB,EAAUnB,EAAOmB,QACjB0D,EAAS7E,EAAO6E,OAChB7E,EAASA,EAAO4F,KACXzE,EAAQvB,OAASkB,IAErBK,EAAUsD,GAAe3D,EAAOC,EAAOI,EAASC,UAG5C,GAAKpB,EAAS,CAIpB,GAHe,YAAV8E,GAAuBE,EAAKK,UAChCrF,EAAS2D,GAAc3D,IAEnBA,EAAOJ,SAAWK,EACtB,MAAM,IAAI0F,WAAY,yIAElBb,IAAU5E,GAAS8E,EAAKU,QAC5B1F,EAASmE,GAAYnE,EAAQC,EAAKC,SAGnCF,EAASqD,EAAcnD,EAAOD,GAO/B,YAJiB,IAAZkB,IACJA,EAAUgB,EAAepB,EAAOK,GAChCyD,EAASxC,EAAgBtB,EAAOI,IAE1B,IAAIwB,EAASzC,EAAOF,EAAQe,EAAOI,EAAS0D,EAAQzD,EAAO2D,IChQnEc,GALYtG"}