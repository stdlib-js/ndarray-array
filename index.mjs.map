{"version":3,"file":"index.mjs","sources":["../lib/is_array_like_object.js","../lib/cast_buffer.js","../lib/copy_view.js","../lib/expand_shape.js","../lib/expand_strides.js","../lib/main.js","../lib/defaults.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests (loosely) if an input value is an array-like object.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if an input value is an array-like object\n*\n* @example\n* var bool = isArrayLikeObject( [] );\n* // returns true\n*\n* @example\n* var bool = isArrayLikeObject( '' );\n* // returns false\n*/\nfunction isArrayLikeObject( value ) {\n\treturn (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\ttypeof value.length === 'number' &&\n\t\tisInteger( value.length ) &&\n\t\tvalue.length >= 0 &&\n\t\tvalue.length < PINF\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isArrayLikeObject;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport bufferCtors from '@stdlib/ndarray-base-buffer-ctors';\nimport allocUnsafe from '@stdlib/buffer-alloc-unsafe';\n\n\n// MAIN //\n\n/**\n* Casts buffer elements by copying those elements to a buffer of another data type.\n*\n* @private\n* @param {(Array|TypedArray|Buffer)} buffer - input buffer\n* @param {NonNegativeInteger} len - number of elements to cast\n* @param {string} dtype - data type\n* @returns {(Array|TypedArray|Buffer)} output buffer\n*\n* @example\n* var b = castBuffer( [ 1.0, 2.0, 3.0 ], 3, 'float64' );\n* // returns <Float64Array>[ 1.0, 2.0, 3.0 ]\n*/\nfunction castBuffer( buffer, len, dtype ) {\n\tvar ctor;\n\tvar out;\n\tvar i;\n\n\tctor = bufferCtors( dtype );\n\tif ( dtype === 'generic') {\n\t\tout = [];\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tout.push( buffer[ i ] );\n\t\t}\n\t} else if ( dtype === 'binary' ) {\n\t\tout = allocUnsafe( len );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tout[ i ] = buffer[ i ];\n\t\t}\n\t} else {\n\t\tout = new ctor( len );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tout[ i ] = buffer[ i ]; // TODO: wrap and use accessors here and above\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default castBuffer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport bufferCtors from '@stdlib/ndarray-base-buffer-ctors';\nimport allocUnsafe from '@stdlib/buffer-alloc-unsafe';\n\n\n// FUNCTIONS //\n\n/**\n* Copies a \"generic\" ndarray view.\n*\n* @private\n* @param {ndarray} arr - input ndarray\n* @returns {Array} output data buffer\n*/\nfunction generic( arr ) {\n\tvar len;\n\tvar out;\n\tvar i;\n\n\tlen = arr.length;\n\tout = [];\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout.push( arr.get( i ) ); // FIXME: what if `arr` has more than one dimensions?\n\t}\n\treturn out;\n}\n\n/**\n* Copies a \"binary\" ndarray view.\n*\n* @private\n* @param {ndarray} arr - input ndarray\n* @returns {Array} output data buffer\n*/\nfunction binary( arr ) {\n\tvar len;\n\tvar out;\n\tvar i;\n\n\tlen = arr.length;\n\tout = allocUnsafe( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout[ i ] = arr.get( i ); // FIXME: what if `arr` has more than one dimensions?\n\t}\n\treturn out;\n}\n\n/**\n* Copies a \"typed\" ndarray view.\n*\n* @private\n* @param {ndarray} arr - input ndarray\n* @param {string} dtype - data type\n* @returns {Array} output data buffer\n*/\nfunction typed( arr, dtype ) {\n\tvar ctor;\n\tvar len;\n\tvar out;\n\tvar i;\n\n\tctor = bufferCtors( dtype );\n\tlen = arr.length;\n\tout = new ctor( len ); // FIXME: need to account for complex number arrays; in which case, we may want to do something similar to `array/convert`\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout[ i ] = arr.get( i ); // FIXME: what if `arr` has more than one dimensions?\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Copies an ndarray view to a data buffer.\n*\n* @private\n* @param {ndarray} arr - input ndarray\n* @param {string} dtype - data type\n* @returns {(Array|TypedArray|Buffer)} output data buffer\n*\n* @example\n* import ndarray from '@stdlib/ndarray-ctor';\n*\n* var buffer = [ 1.0, 2.0, 3.0 ];\n* var shape = [ 3 ];\n* var strides = [ -1 ];\n* var vec = ndarray( 'generic', buffer, shape, strides, 2, 'row-major' );\n*\n* var b = copyView( vec, 'float64' );\n* // returns <Float64Array>[ 3.0, 2.0, 1.0 ]\n*/\nfunction copyView( arr, dtype ) {\n\t// TODO: handle complex number dtypes!!\n\tif ( dtype === 'generic') {\n\t\treturn generic( arr );\n\t}\n\tif ( dtype === 'binary' ) {\n\t\treturn binary( arr );\n\t}\n\treturn typed( arr, dtype );\n}\n\n\n// EXPORTS //\n\nexport default copyView;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Prepends singleton dimensions in order to satisfy a minimum number of dimensions.\n*\n* @private\n* @param {NonNegativeInteger} ndims - number of dimensions\n* @param {Array} shape - array dimensions\n* @param {NonNegativeInteger} ndmin - minimum number of dimensions\n* @returns {Array} output shape array\n*/\nfunction expandShape( ndims, shape, ndmin ) {\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < ndmin-ndims; i++ ) {\n\t\tout.push( 1 );\n\t}\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tout.push( shape[ i ] );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default expandShape;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// MAIN //\n\n/**\n* Expands a strides array to accommodate an expanded array shape (i.e., an array shape with prepended singleton dimensions).\n*\n* @private\n* @param {NonNegativeInteger} ndims - number of dimensions\n* @param {Array} shape - expanded array shape\n* @param {Array} strides - strides array\n* @param {string} order - memory layout order\n* @returns {Array} output strides array\n*\n* @example\n* var out = expandStrides( 4, [ 1, 1, 2, 2 ], [ 1, 2 ], 'column-major' );\n* // returns [ 1, 1, 1, 2 ]\n*\n* @example\n* var out = expandStrides( 4, [ 1, 1, 2, 2 ], [ 2, 1 ], 'row-major' );\n* // returns [ 4, 4, 2, 1 ]\n*/\nfunction expandStrides( ndims, shape, strides, order ) {\n\tvar out;\n\tvar N;\n\tvar s;\n\tvar i;\n\tvar j;\n\n\tN = strides.length;\n\tj = ndims - N;\n\tout = [];\n\tif ( order === 'row-major' ) {\n\t\ts = abs( strides[ 0 ] ) * shape[ j ]; // at `j` is the size of the first non-prepended dimension\n\t\tfor ( i = 0; i < j; i++ ) {\n\t\t\tout.push( s );\n\t\t}\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tout.push( strides[ i ] );\n\t\t}\n\t} else { // column-major\n\t\tfor ( i = 0; i < j; i++ ) {\n\t\t\tout.push( 1 );\n\t\t}\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tout.push( strides[ i ] );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default expandStrides;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport isArray from '@stdlib/assert-is-array';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport shape2strides from '@stdlib/ndarray-base-shape2strides';\nimport strides2offset from '@stdlib/ndarray-base-strides2offset';\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport numel from '@stdlib/ndarray-base-numel';\nimport ndarray from '@stdlib/ndarray-ctor';\nimport isDataType from '@stdlib/ndarray-base-assert-is-data-type';\nimport isOrder from '@stdlib/ndarray-base-assert-is-order';\nimport isCastingMode from '@stdlib/ndarray-base-assert-is-casting-mode';\nimport isAllowedCast from '@stdlib/ndarray-base-assert-is-allowed-data-type-cast';\nimport createBuffer from '@stdlib/ndarray-base-buffer';\nimport getType from '@stdlib/ndarray-base-buffer-dtype';\nimport arrayShape from '@stdlib/array-shape';\nimport flattenArray from '@stdlib/utils-flatten-array';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport isArrayLikeObject from './is_array_like_object.js';\nimport getDefaults from './defaults.js';\nimport castBuffer from './cast_buffer.js';\nimport copyView from './copy_view.js';\nimport expandShape from './expand_shape.js';\nimport expandStrides from './expand_strides.js';\n\n\n// VARIABLES //\n\nvar defaults = getDefaults();\n\n\n// MAIN //\n\n/**\n* Returns a multidimensional array.\n*\n* @param {(ArrayLikeObject|TypedArrayLike|Buffer|ndarrayLike)} [buffer] - data source\n* @param {Options} [options] - function options\n* @param {(ArrayLikeObject|TypedArrayLike|Buffer|ndarrayLike)} [options.buffer] - data source\n* @param {string} [options.dtype=\"float64\"] - underlying storage data type (if the input data is not of the same type, this option specifies the data type to which to cast the input data)\n* @param {string} [options.order=\"row-major\"] - specifies the memory layout of the array as either row-major (C-style) or column-major (Fortran-style)\n* @param {NonNegativeIntegerArray} [options.shape] - array shape\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.copy=false] - boolean indicating whether to copy source data to a new data buffer\n* @param {boolean} [options.flatten=true] - boolean indicating whether to automatically flatten generic array data sources\n* @param {NonNegativeInteger} [options.ndmin=0] - minimum number of dimensions\n* @param {string} [options.casting=\"safe\"] - casting rule used to determine what constitutes an acceptable cast\n* @param {boolean} [options.readonly=false] - boolean indicating if an array should be read-only\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide either an array shape, data source, or both\n* @throws {Error} invalid cast\n* @throws {RangeError} data source must be compatible with specified meta data\n* @returns {ndarray} ndarray instance\n*\n* @example\n* var arr = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var v = arr.get( 0, 0 );\n* // returns 1\n*\n* @example\n* var opts = {\n*     'dtype': 'generic',\n*     'flatten': false\n* };\n*\n* var arr = array( [ [ 1, 2 ], [ 3, 4 ] ], opts );\n* // returns <ndarray>\n*\n* var v = arr.get( 0 );\n* // returns [ 1, 2 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var opts = {\n*     'shape': [ 2, 2 ]\n* };\n*\n* var arr = array( new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] ), opts );\n* // returns <ndarray>\n*\n* var v = arr.get( 0, 0 );\n* // returns 1.0\n*/\nfunction array() {\n\tvar options;\n\tvar strides;\n\tvar buffer;\n\tvar offset;\n\tvar order;\n\tvar dtype;\n\tvar btype;\n\tvar shape;\n\tvar ndims;\n\tvar nopts;\n\tvar opts;\n\tvar len;\n\tvar ord;\n\tvar FLG;\n\n\tif ( arguments.length === 1 ) {\n\t\tif ( isArrayLikeObject( arguments[ 0 ] ) ) {\n\t\t\tbuffer = arguments[ 0 ];\n\t\t\toptions = {};\n\t\t} else {\n\t\t\toptions = arguments[ 0 ];\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( format( '0Le5K', options ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( options, 'buffer' ) ) {\n\t\t\t\tbuffer = options.buffer;\n\t\t\t\tif ( !isArrayLikeObject( buffer ) ) { // weak test\n\t\t\t\t\tthrow new TypeError( format( '0Le5L', 'buffer', buffer ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\tbuffer = arguments[ 0 ];\n\t\tif ( !isArrayLikeObject( buffer ) ) { // weak test\n\t\t\tthrow new TypeError( format( '0Le5M', buffer ) );\n\t\t}\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( '0Le2h', options ) );\n\t\t}\n\t\t// Note: we ignore whether `options` has a `buffer` property\n\t}\n\tif ( buffer ) {\n\t\tif ( isndarrayLike( buffer ) ) {\n\t\t\tbtype = buffer.dtype;\n\t\t\tFLG = true;\n\t\t} else {\n\t\t\tbtype = getType( buffer );\n\t\t\tFLG = false;\n\t\t}\n\t}\n\tnopts = {};\n\topts = {};\n\n\t// Validate some options before others...\n\tif ( hasOwnProp( options, 'casting' ) ) {\n\t\topts.casting = options.casting;\n\t\tif ( !isCastingMode( opts.casting ) ) {\n\t\t\tthrow new TypeError( format( '0Le5N', 'casting', opts.casting ) );\n\t\t}\n\t} else {\n\t\topts.casting = defaults.casting;\n\t}\n\tif ( hasOwnProp( options, 'flatten' ) ) {\n\t\topts.flatten = options.flatten;\n\t\tif ( !isBoolean( opts.flatten ) ) {\n\t\t\tthrow new TypeError( format( '0Le30', 'flatten', opts.flatten ) );\n\t\t}\n\t} else {\n\t\topts.flatten = defaults.flatten;\n\t}\n\tif ( hasOwnProp( options, 'ndmin' ) ) {\n\t\topts.ndmin = options.ndmin;\n\t\tif ( !isNonNegativeInteger( opts.ndmin ) ) {\n\t\t\tthrow new TypeError( format( '0Le35', 'ndmin', opts.ndmin ) );\n\t\t}\n\t\t// TODO: validate that minimum number of dimensions does not exceed the maximum number of possible dimensions (in theory, infinite; in practice, determined by max array length; see https://github.com/stdlib-js/stdlib/blob/ac350059877c036640775d6b30d0e98e840d07cf/lib/node_modules/%40stdlib/ndarray/ctor/lib/main.js#L57)\n\t} else {\n\t\topts.ndmin = defaults.ndmin;\n\t}\n\n\t// Validate the remaining options...\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\tdtype = options.dtype;\n\t\tif ( !isDataType( dtype ) ) {\n\t\t\tthrow new TypeError( format( '0Le5O', 'dtype', dtype ) );\n\t\t}\n\t\tif ( btype && !isAllowedCast( btype, dtype, opts.casting ) ) {\n\t\t\tthrow new Error( format( '0Le5P', opts.casting, btype, dtype ) );\n\t\t}\n\t} else if ( btype ) {\n\t\t// TODO: reconcile difference in behavior when provided a generic array and no `dtype` option. Currently, we cast here, but do not allow casting a generic array (by default) when explicitly providing a `dtype` option.\n\n\t\t// Only cast generic array data sources when not provided an ndarray...\n\t\tif ( !FLG && btype === 'generic' ) {\n\t\t\tdtype = defaults.dtype;\n\t\t} else {\n\t\t\tdtype = btype;\n\t\t}\n\t} else {\n\t\tdtype = defaults.dtype;\n\t}\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\torder = options.order;\n\t\tif ( order === 'any' || order === 'same' ) {\n\t\t\tif ( FLG ) {\n\t\t\t\t// If the user indicated that \"any\" order suffices (meaning the user does not care about ndarray order), then we use the default order, unless the input ndarray is either unequivocally \"row-major\" or \"column-major\" or configured as such....\n\t\t\t\tif ( order === 'any' ) {\n\t\t\t\t\t// Compute the layout order in order to ascertain whether an ndarray can be considered both \"row-major\" and \"column-major\":\n\t\t\t\t\tord = strides2order( buffer.strides );\n\n\t\t\t\t\t// If the ndarray can be considered both \"row-major\" and \"column-major\", then use the default order; otherwise, use the ndarray's stated layout order...\n\t\t\t\t\tif ( ord === 3 ) {\n\t\t\t\t\t\torder = defaults.order;\n\t\t\t\t\t} else {\n\t\t\t\t\t\torder = buffer.order;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Otherwise, use the same order as the provided ndarray...\n\t\t\t\telse if ( order === 'same' ) {\n\t\t\t\t\torder = buffer.order;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\torder = defaults.order;\n\t\t\t}\n\t\t} else if ( !isOrder( order ) ) {\n\t\t\tthrow new TypeError( format( '0Le5Q', 'order', order ) );\n\t\t}\n\t} else {\n\t\torder = defaults.order;\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\tnopts.mode = options.mode;\n\t} else {\n\t\tnopts.mode = defaults.mode;\n\t}\n\tif ( hasOwnProp( options, 'submode' ) ) {\n\t\tnopts.submode = options.submode;\n\t} else {\n\t\tnopts.submode = [ nopts.mode ];\n\t}\n\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\tnopts.readonly = options.readonly;\n\t} else {\n\t\tnopts.readonly = defaults.readonly;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t\tif ( !isBoolean( opts.copy ) ) {\n\t\t\tthrow new TypeError( format( '0Le30', 'copy', opts.copy ) );\n\t\t}\n\t} else {\n\t\topts.copy = defaults.copy;\n\t}\n\t// If not provided a shape, infer from a provided data source...\n\tif ( hasOwnProp( options, 'shape' ) ) {\n\t\tshape = options.shape;\n\t\tif ( !isArrayLikeObject( shape ) ) { // weak test\n\t\t\tthrow new TypeError( format( '0Le5R', 'shape', shape ) );\n\t\t}\n\t\tndims = shape.length;\n\t\tlen = numel( shape );\n\t} else if ( buffer ) {\n\t\tif ( FLG ) {\n\t\t\tshape = buffer.shape;\n\t\t\tndims = buffer.ndims;\n\t\t\tlen = buffer.length;\n\t\t} else if ( opts.flatten && isArray( buffer ) ) {\n\t\t\tshape = arrayShape( buffer );\n\t\t\tndims = shape.length;\n\t\t\tlen = numel( shape );\n\t\t} else {\n\t\t\tndims = 1;\n\t\t\tlen = buffer.length;\n\t\t\tshape = [ len ]; // assume a 1-dimensional array (vector)\n\t\t}\n\t} else {\n\t\tthrow new Error( format( '0Le0X' ) );\n\t}\n\t// Adjust the array shape to satisfy the minimum number of dimensions...\n\tif ( ndims < opts.ndmin ) {\n\t\tshape = expandShape( ndims, shape, opts.ndmin );\n\t\tndims = opts.ndmin;\n\t}\n\t// If not provided a data buffer, create it; otherwise, see if we need to cast a provided data buffer to another data type or perform a copy...\n\tif ( FLG ) {\n\t\tif ( buffer.length !== len ) {\n\t\t\tthrow new RangeError( format( '0Le0Y' ) );\n\t\t}\n\t\tif ( btype !== dtype || opts.copy ) {\n\t\t\tbuffer = copyView( buffer, dtype );\n\t\t} else {\n\t\t\tstrides = buffer.strides;\n\t\t\toffset = buffer.offset;\n\t\t\tbuffer = buffer.data;\n\t\t\tif ( strides.length < ndims ) {\n\t\t\t\t// Account for augmented dimensions (note: expanding the strides array to account for prepended singleton dimensions does **not** affect the index offset):\n\t\t\t\tstrides = expandStrides( ndims, shape, strides, order );\n\t\t\t}\n\t\t}\n\t} else if ( buffer ) {\n\t\tif ( btype === 'generic' && opts.flatten ) {\n\t\t\tbuffer = flattenArray( buffer );\n\t\t}\n\t\tif ( buffer.length !== len ) {\n\t\t\tthrow new RangeError( format( '0Le0Y' ) );\n\t\t}\n\t\tif ( btype !== dtype || opts.copy ) {\n\t\t\tbuffer = castBuffer( buffer, len, dtype );\n\t\t}\n\t} else {\n\t\tbuffer = createBuffer( dtype, len );\n\t}\n\t// If we have yet to determine array strides, we assume that we can compute the strides, along with the index offset, for a **contiguous** data source based solely on the array shape and specified memory layout order...\n\tif ( strides === void 0 ) {\n\t\tstrides = shape2strides( shape, order );\n\t\toffset = strides2offset( shape, strides );\n\t}\n\treturn new ndarray( dtype, buffer, shape, strides, offset, order, nopts );\n}\n\n\n// EXPORTS //\n\nexport default array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport settings from '@stdlib/ndarray-defaults';\n\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*\n* @example\n* var o = defaults();\n* // returns {...}\n*/\nfunction defaults() {\n\treturn {\n\t\t'casting': settings.get( 'casting' ),\n\t\t'copy': false,\n\t\t'dtype': settings.get( 'dtypes.default' ),\n\t\t'flatten': true,\n\t\t'mode': settings.get( 'index_mode' ),\n\t\t'ndmin': 0,\n\t\t'order': settings.get( 'order' ),\n\t\t'readonly': false\n\t};\n}\n\n\n// EXPORTS //\n\nexport default defaults;\n"],"names":["isArrayLikeObject","value","length","isInteger","PINF","castBuffer","buffer","len","dtype","ctor","out","i","bufferCtors","push","allocUnsafe","copyView","arr","get","generic","binary","typed","expandShape","ndims","shape","ndmin","expandStrides","strides","order","N","s","j","abs","defaults","casting","settings","copy","flatten","mode","readonly","array","options","offset","btype","nopts","opts","FLG","arguments","isObject","TypeError","format","hasOwnProp","isndarrayLike","getType","isCastingMode","isBoolean","isNonNegativeInteger","isDataType","isAllowedCast","Error","strides2order","isOrder","submode","numel","isArray","arrayShape","RangeError","data","flattenArray","createBuffer","shape2strides","strides2offset","ndarray"],"mappings":"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"}